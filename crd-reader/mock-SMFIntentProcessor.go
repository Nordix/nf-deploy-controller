// Copyright 2022-2023 The Nephio Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: SMFIntentProcessor.go

// Package crdreader is a generated GoMock package.
package crdreader

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	nfdeploy "github.com/nephio-project/common-lib/nfdeploy"
)

// MockSMFIntentProcessor is a mock of SMFIntentProcessor interface.
type MockSMFIntentProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockSMFIntentProcessorMockRecorder
}

// MockSMFIntentProcessorMockRecorder is the mock recorder for MockSMFIntentProcessor.
type MockSMFIntentProcessorMockRecorder struct {
	mock *MockSMFIntentProcessor
}

// NewMockSMFIntentProcessor creates a new mock instance.
func NewMockSMFIntentProcessor(ctrl *gomock.Controller) *MockSMFIntentProcessor {
	mock := &MockSMFIntentProcessor{ctrl: ctrl}
	mock.recorder = &MockSMFIntentProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMFIntentProcessor) EXPECT() *MockSMFIntentProcessorMockRecorder {
	return m.recorder
}

// GetSMFIntent mocks base method.
func (m *MockSMFIntentProcessor) GetSMFIntent(smfTypeName string, crdReader CRDReader) (SMFIntent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSMFIntent", smfTypeName, crdReader)
	ret0, _ := ret[0].(SMFIntent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSMFIntent indicates an expected call of GetSMFIntent.
func (mr *MockSMFIntentProcessorMockRecorder) GetSMFIntent(smfTypeName, crdReader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSMFIntent", reflect.TypeOf((*MockSMFIntentProcessor)(nil).GetSMFIntent), smfTypeName, crdReader)
}

// getSMFCapacityProfile mocks base method.
func (m *MockSMFIntentProcessor) getSMFCapacityProfile(capacityProfileName string, crdReader CRDReader) (nfdeploy.SMFCapacityProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getSMFCapacityProfile", capacityProfileName, crdReader)
	ret0, _ := ret[0].(nfdeploy.SMFCapacityProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getSMFCapacityProfile indicates an expected call of getSMFCapacityProfile.
func (mr *MockSMFIntentProcessorMockRecorder) getSMFCapacityProfile(capacityProfileName, crdReader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSMFCapacityProfile", reflect.TypeOf((*MockSMFIntentProcessor)(nil).getSMFCapacityProfile), capacityProfileName, crdReader)
}

// getSMFCapacityProfileName mocks base method.
func (m *MockSMFIntentProcessor) getSMFCapacityProfileName(smfTypeName string, crdReader CRDReader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getSMFCapacityProfileName", smfTypeName, crdReader)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getSMFCapacityProfileName indicates an expected call of getSMFCapacityProfileName.
func (mr *MockSMFIntentProcessorMockRecorder) getSMFCapacityProfileName(smfTypeName, crdReader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSMFCapacityProfileName", reflect.TypeOf((*MockSMFIntentProcessor)(nil).getSMFCapacityProfileName), smfTypeName, crdReader)
}
