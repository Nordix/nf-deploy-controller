// Copyright 2022-2023 The Nephio Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: CRDReader.go

// Package crdreader is a generated GoMock package.
package crdreader

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	nfdeploy "github.com/nephio-project/common-lib/nfdeploy"
)

// MockCRDReader is a mock of CRDReader interface.
type MockCRDReader struct {
	ctrl     *gomock.Controller
	recorder *MockCRDReaderMockRecorder
}

// MockCRDReaderMockRecorder is the mock recorder for MockCRDReader.
type MockCRDReaderMockRecorder struct {
	mock *MockCRDReader
}

// NewMockCRDReader creates a new mock instance.
func NewMockCRDReader(ctrl *gomock.Controller) *MockCRDReader {
	mock := &MockCRDReader{ctrl: ctrl}
	mock.recorder = &MockCRDReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCRDReader) EXPECT() *MockCRDReaderMockRecorder {
	return m.recorder
}

// GetSMFCapacityProfileObject mocks base method.
func (m *MockCRDReader) GetSMFCapacityProfileObject(crdName string) (nfdeploy.SMFCapacityProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSMFCapacityProfileObject", crdName)
	ret0, _ := ret[0].(nfdeploy.SMFCapacityProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSMFCapacityProfileObject indicates an expected call of GetSMFCapacityProfileObject.
func (mr *MockCRDReaderMockRecorder) GetSMFCapacityProfileObject(crdName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSMFCapacityProfileObject", reflect.TypeOf((*MockCRDReader)(nil).GetSMFCapacityProfileObject), crdName)
}

// GetSMFTypeObject mocks base method.
func (m *MockCRDReader) GetSMFTypeObject(crdName string) (nfdeploy.SMFType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSMFTypeObject", crdName)
	ret0, _ := ret[0].(nfdeploy.SMFType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSMFTypeObject indicates an expected call of GetSMFTypeObject.
func (mr *MockCRDReaderMockRecorder) GetSMFTypeObject(crdName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSMFTypeObject", reflect.TypeOf((*MockCRDReader)(nil).GetSMFTypeObject), crdName)
}

// GetUPFCapacityProfileObject mocks base method.
func (m *MockCRDReader) GetUPFCapacityProfileObject(crdName string) (nfdeploy.UPFCapacityProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUPFCapacityProfileObject", crdName)
	ret0, _ := ret[0].(nfdeploy.UPFCapacityProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUPFCapacityProfileObject indicates an expected call of GetUPFCapacityProfileObject.
func (mr *MockCRDReaderMockRecorder) GetUPFCapacityProfileObject(crdName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUPFCapacityProfileObject", reflect.TypeOf((*MockCRDReader)(nil).GetUPFCapacityProfileObject), crdName)
}

// GetUPFTypeObject mocks base method.
func (m *MockCRDReader) GetUPFTypeObject(crdName string) (nfdeploy.UPFType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUPFTypeObject", crdName)
	ret0, _ := ret[0].(nfdeploy.UPFType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUPFTypeObject indicates an expected call of GetUPFTypeObject.
func (mr *MockCRDReaderMockRecorder) GetUPFTypeObject(crdName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUPFTypeObject", reflect.TypeOf((*MockCRDReader)(nil).GetUPFTypeObject), crdName)
}

// ReadCRDFiles mocks base method.
func (m *MockCRDReader) ReadCRDFiles(directory string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCRDFiles", directory)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadCRDFiles indicates an expected call of ReadCRDFiles.
func (mr *MockCRDReaderMockRecorder) ReadCRDFiles(directory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCRDFiles", reflect.TypeOf((*MockCRDReader)(nil).ReadCRDFiles), directory)
}
