// Copyright 2022-2023 The Nephio Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: UPFIntentProcessor.go

// Package crdreader is a generated GoMock package.
package crdreader

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	nfdeploy "github.com/nephio-project/common-lib/nfdeploy"
)

// MockUPFIntentProcessor is a mock of UPFIntentProcessor interface.
type MockUPFIntentProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockUPFIntentProcessorMockRecorder
}

// MockUPFIntentProcessorMockRecorder is the mock recorder for MockUPFIntentProcessor.
type MockUPFIntentProcessorMockRecorder struct {
	mock *MockUPFIntentProcessor
}

// NewMockUPFIntentProcessor creates a new mock instance.
func NewMockUPFIntentProcessor(ctrl *gomock.Controller) *MockUPFIntentProcessor {
	mock := &MockUPFIntentProcessor{ctrl: ctrl}
	mock.recorder = &MockUPFIntentProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUPFIntentProcessor) EXPECT() *MockUPFIntentProcessorMockRecorder {
	return m.recorder
}

// GetUPFIntent mocks base method.
func (m *MockUPFIntentProcessor) GetUPFIntent(upfTypeName string, crdReader CRDReader) (UPFIntent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUPFIntent", upfTypeName, crdReader)
	ret0, _ := ret[0].(UPFIntent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUPFIntent indicates an expected call of GetUPFIntent.
func (mr *MockUPFIntentProcessorMockRecorder) GetUPFIntent(upfTypeName, crdReader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUPFIntent", reflect.TypeOf((*MockUPFIntentProcessor)(nil).GetUPFIntent), upfTypeName, crdReader)
}

// getUPFCapacityProfile mocks base method.
func (m *MockUPFIntentProcessor) getUPFCapacityProfile(capacityProfileName string, crdReader CRDReader) (nfdeploy.UPFCapacityProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUPFCapacityProfile", capacityProfileName, crdReader)
	ret0, _ := ret[0].(nfdeploy.UPFCapacityProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUPFCapacityProfile indicates an expected call of getUPFCapacityProfile.
func (mr *MockUPFIntentProcessorMockRecorder) getUPFCapacityProfile(capacityProfileName, crdReader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUPFCapacityProfile", reflect.TypeOf((*MockUPFIntentProcessor)(nil).getUPFCapacityProfile), capacityProfileName, crdReader)
}

// getUPFCapacityProfileName mocks base method.
func (m *MockUPFIntentProcessor) getUPFCapacityProfileName(upfTypeName string, crdReader CRDReader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUPFCapacityProfileName", upfTypeName, crdReader)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUPFCapacityProfileName indicates an expected call of getUPFCapacityProfileName.
func (mr *MockUPFIntentProcessorMockRecorder) getUPFCapacityProfileName(upfTypeName, crdReader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUPFCapacityProfileName", reflect.TypeOf((*MockUPFIntentProcessor)(nil).getUPFCapacityProfileName), upfTypeName, crdReader)
}
